{"version":3,"sources":["img/cat.png","img/catplay.png","components/navbar/index.js","components/square/index.js","components/container/index.js","components/turn/index.js","views/PlayView.js","components/rulesOfTheGame/index.js","views/WelcomeView.js","App.js","serviceWorker.js","index.js"],"names":["module","exports","Navbar","className","alt","src","cat","Square","useState","icon","setIcon","onClick","Container","check","value","Turn","PlayView","RulesOfTheGame","WelcomeView","to","catplay","App","path","component","Boolean","window","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","then","registration","unregister"],"mappings":"iHAAAA,EAAOC,QAAU,IAA0B,iC,gBCA3CD,EAAOC,QAAU,IAA0B,qC,mRCmB5BC,G,MAbA,WACb,OACE,6BACE,yBAAKC,UAAU,UACb,yBAAKC,IAAI,QAAQC,IAAKC,IAAKH,UAAU,YACrC,gD,OCsBOI,G,MAzBA,WAAO,IAAD,EACKC,mBAAS,KADd,mBACZC,EADY,KACNC,EADM,KAiBnB,OACE,yBAAKP,UAAU,SAASQ,QAAS,WAAOD,EAAW,OAClDD,KCiBUG,G,MA7BG,WAAO,IAAD,EAEMJ,mBAAS,KAFf,mBAEdK,EAFc,UAQtB,OACE,yBAAKV,UAAU,aACb,yBAAKA,UAAU,kBACb,kBAAC,EAAD,CAAQW,MAAO,EAAGH,QAAS,MAAOE,GAClC,kBAAC,EAAD,CAAQC,MAAO,EAAGH,QAAS,OAC3B,kBAAC,EAAD,CAAQG,MAAO,EAAGH,QAAS,QAE7B,yBAAKR,UAAU,kBACb,kBAAC,EAAD,CAAQW,MAAO,EAAGH,QAAS,OAC3B,kBAAC,EAAD,CAAQG,MAAO,EAAGH,QAAS,OAC3B,kBAAC,EAAD,CAAQG,MAAO,EAAGH,QAAS,QAE7B,yBAAKR,UAAU,kBACb,kBAAC,EAAD,CAAQW,MAAO,EAAGH,QAAS,OAC3B,kBAAC,EAAD,CAAQG,MAAO,EAAGH,QAAS,OAC3B,kBAAC,EAAD,CAAQG,MAAO,EAAGH,QAAS,WC7BpBI,G,MANF,WACX,OACE,yBAAKZ,UAAU,QAAf,uBCiBWa,G,YAbE,WACf,OACE,6BACE,kBAAC,EAAD,MACA,kBAAC,EAAD,MACA,yBAAKb,UAAU,aACb,kBAAC,EAAD,U,iBCFOc,G,MAVQ,WACrB,OACE,6BACE,yBAAKd,UAAU,SACb,2GCsBOe,EAtBK,WAClB,OACE,6BACE,kBAAC,EAAD,MACA,yBAAKf,UAAU,mBACb,yBAAKA,UAAU,uBAEb,kBAAC,EAAD,MACA,kBAAC,IAAD,CAAMgB,GAAI,SACR,4BAAQhB,UAAU,aAAlB,WAKJ,yBAAKC,IAAI,OAAOC,IAAKe,SCLdC,MAXf,WACE,OACE,kBAAC,IAAD,KACE,kBAAC,IAAD,KACE,kBAAC,IAAD,CAAOC,KAAK,QAAQC,UAAWP,IAC/B,kBAAC,IAAD,CAAOM,KAAK,IAAIC,UAAWL,OCEfM,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DCbNC,IAASC,OAAO,kBAAC,EAAD,MAASC,SAASC,eAAe,SD8H3C,kBAAmBC,WACrBA,UAAUC,cAAcC,MAAMC,MAAK,SAAAC,GACjCA,EAAaC,kB","file":"static/js/main.be422a54.chunk.js","sourcesContent":["module.exports = __webpack_public_path__ + \"static/media/cat.b1538413.png\";","module.exports = __webpack_public_path__ + \"static/media/catplay.35e6fe57.png\";","import React from 'react';\nimport cat from '../../img/cat.png';\n\nimport './style.css';\n\n\nconst Navbar = () => {\n  return(\n    <div>\n      <div className='navbar'>\n        <img alt='michi' src={cat} className='img-cat'/> \n        <div>\n          Tic-Tac-Toc\n        </div>\n      </div>\n    </div>\n    )\n}\n\nexport default Navbar;","import React, {useState} from 'react';\nimport './style.css';\nimport { FaCheckCircle } from \"react-icons/fa\";\nimport { FaTimesCircle } from \"react-icons/fa\";\n\n// values = [0,0,0]\n// turno = 0\n\nconst Square = () => {\n  const [icon, setIcon] = useState('O');\n\n  // const handleChange = (icon) => {}\n  //   if(icon == ''){\n  //     setIcon(`${'X'}`)\n  //   }else if (setIcon == 'X'){\n  //     setIcon(`${'O'}`)\n  //   }\n  // }\n  //  values[value_cuadrito] = 1\n  //  if %turno == 0\n  //   setIcon(`${'X'}`)\n  //  else\n  //   setIcon(`${'O'}`)\n  // turno+=1;\n   \n  return(\n    <div className='square' onClick={() => {setIcon(`${'X'}`)}}>\n    {icon}\n\n    </div>\n  )\n}\n\nexport default Square;","import React, { useState } from 'react';\nimport Square from '../square';\nimport './style.css';\n\nconst values = [null, null, null, null, null, null, null, null ,null]\n\n// Iterar los recuadros para colocar 1 Ã² 0 segun de quien sea el turno\n// function myTurn (value) {\n//   for(let i = 0; i<values.length; i++){\n//     //Si es par o impar\n//     // if(i)\n//       //values[value] = 1 o 0\n//   }\n// }\n\nconst Container = () => {\n\n  const [ check, setCheck ] = useState('X')\n\n  const handleClick = () => {\n    setCheck(`${'X'}`)\n  }\n\n  return(\n    <div className='container'>\n      <div className='container-flex'>\n        <Square value={0} onClick={null}>{check}</Square>\n        <Square value={1} onClick={null}/>\n        <Square value={2} onClick={null}/>\n      </div>\n      <div className='container-flex'>\n        <Square value={3} onClick={null}/>\n        <Square value={4} onClick={null}/>\n        <Square value={5} onClick={null}/>\n      </div>\n      <div className='container-flex'>\n        <Square value={6} onClick={null}/>\n        <Square value={7} onClick={null}/>\n        <Square value={8} onClick={null}/>\n      </div>\n    </div>\n  )\n}\n\nexport default Container;","import React from 'react';\nimport './style.css';\n\nconst Turn = () => {\n  return(\n    <div className='turn'>Es el turno de: X</div>\n  )\n}\n\nexport default Turn;","import React from 'react';\nimport Navbar from '../components/navbar';\nimport Container from '../components/container';\nimport Turn from '../components/turn';\nimport UserForm from '../components/userform';\n\nimport './style.css';\n\n\nconst PlayView = () => {\n  return (\n    <div>\n      <Navbar />\n      <Turn />\n      <div className='play-view'>\n        <Container />\n      </div>\n    </div>\n\n  )\n}\n\nexport default PlayView;","import React from 'react';\nimport './style.css';\n\nconst RulesOfTheGame = () => {\n  return(\n    <div>\n      <div className='rules'>\n        <h5> Se requieren de 2 jugadores, el primero en tirar es X, el segundo es O</h5>\n      </div>\n    </div>\n  )\n}\n\nexport default RulesOfTheGame;","import React from 'react';\nimport Navbar from '../components/navbar';\n// import UserForm from '../components/userform';\nimport { Link } from 'react-router-dom';\nimport catplay from '../img/catplay.png';\nimport RulesOfTheGame from '../components/rulesOfTheGame';\n\nconst WelcomeView = () => {\n  return(\n    <div>\n      <Navbar /> \n      <div className='container-rules'>\n        <div className='container-btn-start'>\n          {/* <UserForm /> */}\n          <RulesOfTheGame />\n          <Link to={'/play'}>\n            <button className='btn-start'>\n              START\n            </button>\n          </Link>\n        </div>\n        <img alt='play' src={catplay} />\n      </div>\n\n    </div>\n  )\n\n}\n\nexport default WelcomeView;","import React from 'react';\nimport { BrowserRouter, Route, Switch } from 'react-router-dom';\nimport PlayView from './views/PlayView';\nimport WelcomeView from './views/WelcomeView';\n\nfunction App() {\n  return (\n    <BrowserRouter>\n      <Switch>\n        <Route path='/play' component={PlayView} />\n        <Route path='/' component={WelcomeView} />\n      </Switch>\n    </BrowserRouter>\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' }\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}